/*
类的成员之四：初始化快
	分类
		静态代码块
		非静态代码块（没有static修饰
		相同
			可以有输出语句
			可以对类的属性+类的声明进行初始化操作
			可以按照从上到下的顺序依次执行
		不同
			静态代码块
				不可以对非静态的属性（属性+方法）初始化
				静态代码块的执行要先于非静态代码块
				静态代码块只执行一次
			非静态代码块（没有static修饰）
				每一创建对象的时候都会执行一次，且先于构造器执行
		程序自己创建类中的属性方法
			左击“Source”
				创建接口
				生成getter和setter方法

				生成toString()方法
				生成hashCode()+equals()方法
				生成构造函数方法
		练习：TestOrder.java
*/
package day3;

public class TestSingleton {

	public static void main(String[] args) {
		Singleton s1 = Singleton.getSingleton();
		Singleton s2 = Singleton.getSingleton();
		System.out.println(s1 == s2);  //判断两个别名是不是同一个实例

	}
}

class Singleton {
	private static Singleton instance = new Singleton();
	// 私有化构造器（在类外不能调用，想创建对象只能在该类的内部创建）
	private Singleton () {
	}
	// 提供公共的方法来调用该对象(因为不能实例化，所以只能用该类来调：static)
	public static Singleton getSingleton() {
		return instance;
	}
}
