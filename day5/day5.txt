接口（连接day4）
	接口可以实例化继承了它的可以实例化的类（没有继承他的+本身的接口，不可以实例化成该接口的对象）
	接口的匿名类对象
		方法一：直接创建一个接口类对象，调用接口的构造器（虽然接口没有构造器，现在覆盖抽象方法就可以），
		方法二：匿名的对象作为方法的形参传入方法，在方法内需要将该接口的抽象方法全部重写
			，重写之后运行就可以运行成功
		练习：TestUsb.java
		对象的属性比较，但是形参为不是该属性，而是对应的对象时，要先判断该类中时候有改属性（是否是哪个类的实例化）
			，然后将形参类强制转换成有改属性的类
			，然后用this关键字调用本类的对应属性，然后和形参中的类中的对应属性进行比较
		练习：TestInterface.java
	练习：PayrollSystem.java MyDate.java Employee.java HourlyEmployee.java

内部类
	定义：允许一个类的定义位于另一个类的内部，前者称为内部类，后者为外部类
	inner class
	inner class:可以使用外部类的私有数据（他属于外部类的额成员，同一个成员之间可以相互访问）
		外部类调用内部类的属性时，其方法为：内部类.成员，或者内部类对象.成员
	分类：
		成员内部类
			外部类的一个成员
				可以有修饰符
				可以有static+final
				可以调用外部类的属性和方法
			还是一个类
				abstract
				可以在其内部定义属性、方法、构造器
		局部内部类+匿名内部类
	练习 TestInnerClass.java

异常
	exception:其他因编程错误或偶然的外在原因导致的一般性问题，可以用针对性的代码进行处理
	分类
		Error：网络+IO延迟等（程序异常不对此处理）
		编译时异常：

		运行时异常：RuntimeException
			数组下标越界异常
			算术异常（分母为零）
			类型转换异常（对象-->String）
			空指针异常（对象实例成null）
	处理异常（抓抛模型）
		抛异常
			当我们执行代码时，一旦出现异常，就会在异常的代码处生成一个对应的异常类型的队形
				，并对此对象抛出
			>一旦抛出此异常类的对象，那么程序就终止执行
			>此异常类的对象抛给调用者
		抓异常
			抓住上一步抛出来的类的对象，如何抓即为异常处理方式
			Java提供了两种用来处理一个异常类的对象
				方式一
					try{
					//可能出现异常的代码
					}catch(Exception e) {
					// 对异常的处理方式
					}finally {
					// 无论有没有有异常都执行
					}
				注
					try内声明的变量，类似于局部变量，除了try{}语句，就不能被调用
					finally为可选项
					catch内部是对异常类的处理（可以有多个）
					如果异常处理了，那么异常代码继续执行
				练习  TestException.java
				方式二
					未完待续……