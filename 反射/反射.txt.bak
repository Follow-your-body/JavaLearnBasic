反射（day16）
学习内容
	1.理解Class类并实例化Class类对象（重点掌握）
	2.运行时创建类对象并获取类的完成结构（学习）
	3.通过反射调用类的指定方法+指定属性（掌握）
	4.动态代理（较难）
功能
	1.在运行时判断任意一个对象所属的类
	2.在运行时判断任意一个类的对象
	3.在运行时判断任意一个类所具有的的成员变量和方法
	4.在运行时判断任意一个对象的成员变量和方法
	5.生成动态代理
	练习： 通过反射调用一个类的对象+调用其中的方法、属性
		@Test
		public void test1() throws InstantiationException, IllegalAccessException, NoSuchFieldException, SecurityException, NoSuchMethodException, IllegalArgumentException, InvocationTargetException {
			Class<Person> c = Person.class;
			
			// 1.创建c对应的运行时类的对象
			Person p = c.newInstance();
			System.out.println(p);
			
			// 2.调用指定属性（public+private）
			Field f1 = c.getField("name");
			f1.set(p, "anna");
			System.out.println(p);
			Field f2 = c.getDeclaredField("age");
			f2.setAccessible(true);
			f2.set(p, 12);
			
			// 3.调用指定方法
			Method m1 = c.getMethod("show");
			m1.invoke(p);
			Method m2 = c.getMethod("display", String.class);
			m2.invoke(p, "china");
		}
理解反射的源头
	java.lang.Class：是反射的源头（获取对象+Field+Method+包+注解）	
	创建了一个类，通过编译(javac.exe)生成对应的.calss文件（编译的过程），之后使用使用Java.exe加载（Java虚拟机的类加载器）
	此.class文件。 此.java文件加载到内存之后，就是一个运行时类，存在在缓存区。那么这个运行时类本身就是一个Class文件
	注意：每一个运行时类只加载一次！ 有了Class之后我们才可以运行一下的操作
		1.创建对应运行时类Person类的对象
		2.获取对应运行时类的结构（属性+方法+构造器+内部类+所在的包+父类等）
		3.调用运行时类的指定的结构（属性+方法+构造器+内部类+所在的包+父类等）
		4.反射的应用：动态代理

获取Class的结构
	1.如何获取Class的实例（3种）

		// 1.调用运行时类本身的.Class属性(自己定义+本身就有)
		Class<Person> c1 = Person.class;		
		Class c2 = String.class;

		// 2.通过运行时类的对象获取
		Person p = new Person();
		Class c3 = p.getClass();

		// 3.通过Class的静态方法
		String className = "day16.Person";  // 后面为类的包名.类名
		Class c4 = Class.forName(className);

		// 4.通过类的加载器
		ClassLoader classLoader = this.getClass().getClassLoader();
		Class<?> c5 = classLoader.loadClass(className);
		【理解】
		获取Class类，运行时（.getClass()）+ 反射(类名.class) + 静态（Class.forName("类名位置")）

			1.1什么是加载器？
			理解：将编译运行之后的文件加载到内存中的就是……
			1.2加载器有什么用？
			获取具体包名下的文件（不再是仅获取工程下的文件）
				ClassLoader loader4 = this.getClass().getClassLoader();
					BufferedReader br = null;
					try {
						// 加载器获取的文件是InputStream的形式，读取时需要用转换流转换之后读取
						InputStream is = loader4.getResourceAsStream("day16\\test.txt");
						InputStreamReader isr = new InputStreamReader(is);
						br = new BufferedReader(isr);
						String str;
						while((str = br.readLine()) != null) {
							System.out.println(str);
						}
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} finally {
						if(br != null) {
							try {
								br.close();
							} catch (IOException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}
					}					
				     }
	2.获取实例之后，如何获取实例中的方法+属性+注解+接口+异常+等
		2.1获取属性的属性：
			属性本身――――――――getFields()/getDeclaredFields()
			权限修饰符――――Modifier.toString(i.getModifiers())
			变量类型――――getType()
			变量名――――getName()
			2.1.1属性本省
				Class c1 = Person.class;
			
				// 1.getFields()：获取运行时类（还有父类）中声明为public的属性（只有name属性）
				Field[] field = c1.getFields();

				// 2.getDeclaredFields()：获取运行时类(没有父类)中所有的属性
				Field[] field1 = c1.getDeclaredFields();

			2.1.2权限修饰符+变量类型+变量名
				Class c1 = Person.class;
				Field[] field = c1.getDeclaredFields();
				for(Field i: field){
					// 1.获取每个属性的权限修饰符
					String str1 = Modifier.toString(i.getModifiers());
					System.out.println(i + ": "+ str1);
					// 2.获取属性的类型
					Class type = i.getType();
					System.out.println(i + ":" + type);
					// 3.获取变量名(私有的)
					System.out.println(i + ": " + i.getName());
				}
		2.2获取方法的属性
			方法本身――――――――――――――――――getMethods() / getDeclaredMethods()
			注解―――――――――――――――――――――getAnnotations()
			修饰符――――――――――――――――――Modifier.toString(method.getModifiers())
			返回值类型――――――――――――――getReturnType()
			名称――――――――――――――――――――getName()
			形参的名称+返回值类型―――method.getParameters() / getParameterTypes()
			抛异常――――――――――――――――――getExceptionTypes()
			2.2.1方法本身
				Class c = Person.class;

				// 1.getMethods()：获取运行时类（还有父类）中声明为public的方法
				Method[] methods = c.getMethods();
				
				// 2.getDeclaredMethods():获取运行时类（不包含父类）的所有方法
				Method[] methods1 = c.getDeclaredMethods();
			2.2.2方法的属性
				Class c = Person.class;
				Method[] methods = c.getDeclaredMethods();
				for(Method method: methods) {
					
					// 1.注解
					Annotation[] annotations = method.getAnnotations();
					
					// 2.修饰符
					String str1 = Modifier.toString(method.getModifiers());
					
					// 3.返回值类型
					System.out.print(method.getReturnType() + " ");
					
					// 4.获取名称
					String str = method.getName();
					
					// 5.形参的名称+返回值类型
					Parameter[] parameters = method.getParameters();
					for(Parameter parameter: parameters) {
						// 5.1形参的名称
						parameter.getName();
					}
					
					// 5.2. 形参列表的数据类型
					Class<?>[] parameterTypes = method.getParameterTypes();
					
					// 6.抛异常
					Class<?>[] exceptions = method.getExceptionTypes();
								
				}

		2.3调用指定的方法
			Class c = Person.class;
		
			// getMethod（）：根据名称获取类中private的方法
			Method m1 = c.getMethod("show");
			Method m2 = c.getDeclaredMethod("display", String.class);
			Person p = (Person)c.newInstance();
			
			// invoke（）：反射调用对象中的方法(私有需要加setAccessible(true))
			m1.invoke(p);
			m2.setAccessible(true);
			m2.invoke(p, "china");
			
			//静态方法的调用
			Method m3 = c.getMethod("info");
			m3.invoke(Person.class);
		【理解】
			1.public用getMethod()
			2.private用getDeclaredMethod()
			3.调用方法用invoke()
			4.私有方法的调用之前要加setAccessible(true)方法
			5.静态方法调用时，对象写成对象名.class
			
		2.4调用指定的属性
			Class c = Person.class;
			// 获取指定的属性
			Field name = c.getField("name");
			Field age = c.getDeclaredField("age");
			// 创建运行时类的对象
			Person p = (Person) c.newInstance();
			System.out.println(p);
			// 将运行时类的指定的属性赋值(public)
			name.set(p, "danay");
			System.out.println(p);
			// 将运行时类的指定的属性赋值(private )
			age.setAccessible(true);
			age.set(p, 23);
			System.out.println(p);	

		2.5调用指定的构造器
			Class c = Person.class;
			Constructor c1 = c.getDeclaredConstructor(String.class,int.class );
			c1.setAccessible(true);
			Person p = (Person)c1.newInstance("dayan", 24);
		【理解】
			1.数据类型需要写成:数据类型.class的形式

生成动态代理
	动态创建代理类：TestProxy.java
	没太明白
	【理解】
	在代理类中创建被代理类的对象，代理类实例化之后，可以操作被代理类中的属性和方法

